<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Zeng Yan's Blog - Zengyan</title><link>https://zeng-yan.github.io/</link><description>If dreams can't come true, then why not pretend?</description><lastBuildDate>Wed, 08 Jan 2025 00:00:00 +0800</lastBuildDate><item><title>[Godot] Flat-Color Shader</title><link>https://zeng-yan.github.io/flat-color-shader.html</link><description>&lt;p&gt;一直想学习Shader, 之前的几次入门尝试结果都不甚满意. 可能以具体的带有目标的学习会是更好的方法.&lt;br&gt;
前几天看见了下面 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zengyan</dc:creator><pubDate>Wed, 08 Jan 2025 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:zeng-yan.github.io,2025-01-08:/flat-color-shader.html</guid><category>Godot</category><category>Godot</category></item><item><title>WebRTC 简明笔记</title><link>https://zeng-yan.github.io/webrtc.html</link><description>&lt;h2 id="_1"&gt;简介&lt;/h2&gt;
&lt;p&gt;WebRTC (Web Real-Time Communication) 是一套复杂的规范集合, 它依赖于许多后台技术 (如 ICE、DTLS、SDP) 来提供快速、实时以及安全的点对点 (P2P) 通信. &lt;/p&gt;
&lt;p&gt;其基 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zengyan</dc:creator><pubDate>Thu, 29 Aug 2024 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:zeng-yan.github.io,2024-08-29:/webrtc.html</guid><category>工具</category><category>工具</category><category>Python</category><category>Godot</category></item><item><title>[Godot] 使用 WebSocket 连接 Godot 客户端与 Python 服务器</title><link>https://zeng-yan.github.io/websocket-between-godot-and-python.html</link><description>&lt;h2 id="python-websocket"&gt;搭建 Python WebSocket 服务器&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;websockets&lt;/span&gt;

&lt;span class="n"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9000&lt;/span&gt;
&lt;span class="n"&gt;IP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;handle_websocket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;处理接收消息的回调函数&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;websocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Received message: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c1"&gt;# XXX: Do some stuff here with the …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zengyan</dc:creator><pubDate>Wed, 28 Aug 2024 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:zeng-yan.github.io,2024-08-28:/websocket-between-godot-and-python.html</guid><category>Godot</category><category>Godot</category><category>Python</category></item><item><title>[Godot] 在 Godot 中生成无限地形</title><link>https://zeng-yan.github.io/godot-infinite-terrain.html</link><description>&lt;h2 id="_1"&gt;无限地形加载的实现&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class_name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;InfTerrain&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;extends&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Node3D&lt;/span&gt;

&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;chunk_size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb nb-Type"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# 每个块的尺寸&lt;/span&gt;
&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;chunk_amount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb nb-Type"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# 每次生成和显示的块数&lt;/span&gt;
&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="k"&gt;export&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;base_height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb nb-Type"&gt;float&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# 生成块的基准 …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zengyan</dc:creator><pubDate>Thu, 15 Aug 2024 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:zeng-yan.github.io,2024-08-15:/godot-infinite-terrain.html</guid><category>Godot</category><category>Godot</category></item><item><title>[GOFAI] Boids 群聚模型</title><link>https://zeng-yan.github.io/boids.html</link><description>&lt;p&gt;Boids (Bird-oid objects) 是一种模拟鸟类, 鱼类等动物群体行为的模型. 在 Boids 中, 单个成员仅遵循极其简单的规则, 但这些个体与个体之间以 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zengyan</dc:creator><pubDate>Sat, 27 Jul 2024 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:zeng-yan.github.io,2024-07-27:/boids.html</guid><category>算法</category><category>算法</category><category>GOFAI</category><category>Godot</category></item><item><title>[PCG] 使用 Diamond-Square 算法生成分形地形</title><link>https://zeng-yan.github.io/diamond-square.html</link><description>&lt;p&gt;&lt;img alt="Terrain made by diamond-square" src="https://zeng-yan.github.io/essayimages/diamond%20square%20terrain.png"&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;分形地形&lt;/h2&gt;
&lt;p&gt;对于地形生成, 第一个问题是使用何种数据结构表示地形. 通常采用的高度图是一种二维矩阵或像素图的形式 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zengyan</dc:creator><pubDate>Fri, 12 Jul 2024 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:zeng-yan.github.io,2024-07-12:/diamond-square.html</guid><category>算法</category><category>算法</category><category>程序化生成</category><category>Python</category></item><item><title>[PCG] 快速泊松盘采样</title><link>https://zeng-yan.github.io/fast-poisson-disc-sampling.html</link><description>&lt;p&gt;&lt;img alt="fast poisson disc sampling" src="https://zeng-yan.github.io/essayimages/fast%20poisson%20disc%20sampling.png"&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;算法概述&lt;/h2&gt;
&lt;p&gt;快速泊松盘采样 (Fast Poisson Disk Sampling) 是一种在给定空间范围内生成随机点的算法, &lt;br&gt;
这些点会较为均匀地分布在整个空间 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zengyan</dc:creator><pubDate>Fri, 12 Jul 2024 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:zeng-yan.github.io,2024-07-12:/fast-poisson-disc-sampling.html</guid><category>算法</category><category>算法</category><category>程序化生成</category><category>Python</category></item><item><title>[PCG] Voronoi 图和 Delaunay 三角剖分</title><link>https://zeng-yan.github.io/voronoi-and-delaunay.html</link><description>&lt;h2 id="voronoi-delaunay"&gt;Voronoi 图和 Delaunay 三角剖分&lt;/h2&gt;
&lt;p&gt;Voronoi 图和 Delaunay 三角剖分均是图形处理, 计算几何, 地理信息系统等多个领域中的重要技术.&lt;/p&gt;
&lt;p&gt;Delaunay 三角剖分是一 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zengyan</dc:creator><pubDate>Thu, 04 Jul 2024 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:zeng-yan.github.io,2024-07-04:/voronoi-and-delaunay.html</guid><category>算法</category><category>算法</category><category>程序化生成</category></item><item><title>[GOFAI] 元胞自动机</title><link>https://zeng-yan.github.io/cellular-automata.html</link><description>&lt;p&gt;元胞自动机 (Cellular Automata) 是一种简单但强大的数学模型, 广泛应用于复杂系统的行为模拟. &lt;br&gt;
这一模型的吸引力在于通过一系列基 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zengyan</dc:creator><pubDate>Wed, 26 Jun 2024 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:zeng-yan.github.io,2024-06-26:/cellular-automata.html</guid><category>算法</category><category>算法</category><category>GOFAI</category></item><item><title>[PCG] 一种地牢生成算法</title><link>https://zeng-yan.github.io/dungeon-generator.html</link><description>&lt;p&gt;地牢是 Rouge-like 游戏中常见的一种地形设计, 一个地牢通常包含很多房间, 房间之间通过蜿蜒曲折的通道连接起来. 在我一开始 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zengyan</dc:creator><pubDate>Wed, 26 Jun 2024 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:zeng-yan.github.io,2024-06-26:/dungeon-generator.html</guid><category>算法</category><category>算法</category><category>程序化生成</category><category>Python</category><category>Godot</category></item><item><title>[Godot] 旋转物体朝向目标</title><link>https://zeng-yan.github.io/godot-rotate.html</link><description>&lt;p&gt;旋转物体 &lt;code&gt;self&lt;/code&gt; 朝向目标 &lt;code&gt;target&lt;/code&gt;, 最快捷的方式是使用 &lt;code&gt;self.look_at()&lt;/code&gt; 方法, 但是这个方法会立即让物体转向目标, 很多时候显得不自然.&lt;/p&gt;
&lt;p&gt;下面 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zengyan</dc:creator><pubDate>Mon, 29 Jan 2024 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:zeng-yan.github.io,2024-01-29:/godot-rotate.html</guid><category>Godot</category><category>Godot</category></item><item><title>[Godot] 抛体运动</title><link>https://zeng-yan.github.io/projectile-motion.html</link><description>&lt;h2 id="_1"&gt;已知目标位置, 固定速度求发射角度&lt;/h2&gt;
&lt;p&gt;记发射速度 &lt;span class="math"&gt;\(v\)&lt;/span&gt; , 水平距离 &lt;span class="math"&gt;\(d\)&lt;/span&gt; , 垂直距离 &lt;span class="math"&gt;\(h\)&lt;/span&gt; , 求发射角 &lt;span class="math"&gt;\(\theta\)&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;将弹头的移动分解为水平和垂直 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zengyan</dc:creator><pubDate>Mon, 29 Jan 2024 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:zeng-yan.github.io,2024-01-29:/projectile-motion.html</guid><category>Godot</category><category>Godot</category></item><item><title>使用神经网络寻找相似图像和图像去重</title><link>https://zeng-yan.github.io/image-similarity-and-deduplicate.html</link><description>&lt;h1 id="_1"&gt;使用神经网络计算图像图像相似度&lt;/h1&gt;
&lt;p&gt;这里 Resnet18 用作图像的特征提取器, 即模型隐藏层的输出被视为输入图像的特征. 然后, 通 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zengyan</dc:creator><pubDate>Wed, 26 Jul 2023 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:zeng-yan.github.io,2023-07-26:/image-similarity-and-deduplicate.html</guid><category>算法</category><category>算法</category><category>神经网络</category><category>Python</category></item><item><title>栅格地图 (二) DEM高程地图处理</title><link>https://zeng-yan.github.io/dem.html</link><description>&lt;p&gt;&lt;img alt="结果示例" src="https://zeng-yan.github.io/essayimages/dem-tw.png"&gt;&lt;/p&gt;
&lt;p&gt;要使用 &lt;code&gt;gdal-python&lt;/code&gt; 来读取和处理 &lt;code&gt;tif&lt;/code&gt; 格式的高程地图, 其核心在于理解 gdal 中的 &lt;code&gt;GetGeoTransform&lt;/code&gt; 方法并使用它来进行坐标转换. 下面我绘制了一张 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zengyan</dc:creator><pubDate>Tue, 27 Jun 2023 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:zeng-yan.github.io,2023-06-27:/dem.html</guid><category>算法</category><category>算法</category><category>Python</category></item><item><title>栅格地图 (一) 直线光栅化</title><link>https://zeng-yan.github.io/rasterization.html</link><description>&lt;p&gt;&lt;img alt="alt text" src="https://zeng-yan.github.io/essayimages/rasterization.png"&gt;&lt;/p&gt;
&lt;p&gt;在工作中频繁涉及对栅格地图的处理, 所以写一些笔记来进行归纳总结.&lt;/p&gt;
&lt;p&gt;在栅格地图中做直线的光栅化主要有两个目的 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zengyan</dc:creator><pubDate>Tue, 27 Jun 2023 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:zeng-yan.github.io,2023-06-27:/rasterization.html</guid><category>算法</category><category>算法</category><category>Python</category></item><item><title>使用Python的Pelican来搭建简易个人博客</title><link>https://zeng-yan.github.io/build-blog-using-python-pelican.html</link><description>&lt;h2 id="pelican"&gt;Pelican的安装与使用&lt;/h2&gt;
&lt;p&gt;首先安装 Pelican&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install pelican invoke markdown
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在本地文件夹打开终端, 输入下列命令初始化项目:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pelican-quickstart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;额外的, 可以在 &lt;code&gt;pelicanconf.py&lt;/code&gt; 文件中修改网页的各 …&lt;/p&gt;&lt;/blockquote&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zengyan</dc:creator><pubDate>Tue, 20 Jun 2023 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:zeng-yan.github.io,2023-06-20:/build-blog-using-python-pelican.html</guid><category>工具</category><category>工具</category><category>Python</category></item><item><title>一行命令部署Wiki系统: 用Docker部署Wiki.js</title><link>https://zeng-yan.github.io/deploy-wikijs-simply.html</link><description>&lt;p&gt;&lt;a href="https://js.wiki/"&gt;Wiki.js&lt;/a&gt; 是一个轻量且牛逼的, 该有的功能都有的开源知识库系统.&lt;/p&gt;
&lt;h2 id="1-docker"&gt;1 安装Docker&lt;/h2&gt;
&lt;p&gt;在 Linux 下安装 Docker , Ubuntu 使用命令 &lt;code&gt;apt install docker&lt;/code&gt; , CentOS 使用命令 &lt;code&gt;dnf …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zengyan</dc:creator><pubDate>Tue, 20 Jun 2023 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:zeng-yan.github.io,2023-06-20:/deploy-wikijs-simply.html</guid><category>工具</category><category>工具</category></item><item><title>Build Image of Python-Gdal</title><link>https://zeng-yan.github.io/build-python-gdal-docker.html</link><description>&lt;p&gt;Installation of Python-Gdal is a annoying thing, in addition to using conda to deal with various dependencies. On the other hand, Docker Hub provides a lot of Python-Gdal images, but they either do not match the version requirements, or are difficult to use. &lt;/p&gt;
&lt;p&gt;Here provides a simple alternative to build …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zengyan</dc:creator><pubDate>Fri, 09 Jun 2023 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:zeng-yan.github.io,2023-06-09:/build-python-gdal-docker.html</guid><category>Python</category><category>Python</category></item><item><title>理解 Attention 机制</title><link>https://zeng-yan.github.io/attention.html</link><description>&lt;p&gt;在Seq2Seq结构中, 编码器输出语义向量c作为解码器的输入. &lt;br&gt;
在早期模型中, 编码器只输出一个c, 它可以是编码器最后一个时间步的h, 也可以是全部时 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zengyan</dc:creator><pubDate>Wed, 01 Mar 2023 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:zeng-yan.github.io,2023-03-01:/attention.html</guid><category>算法</category><category>算法</category><category>神经网络</category></item><item><title>Base64 与 ndarray 相互转换</title><link>https://zeng-yan.github.io/base64-and-ndarray.html</link><description>&lt;p&gt;一个base64图片编码示例&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="sr"&gt;/jpeg;base64,/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoMDAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT/2wBDAQMEBAUEBQkFBQkUDQsNFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT/wAARCAAYABgDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD9M/HHihPCvhvU7uOW2bUorOaaztJ5VQ3EqoSqDJGctgfjXw/4y/aY+L/hTWo2fXZI7KbbJFFc6bZqGwql0+QMcBiR97JGDxmrXx+8J33xK/a3uvDc141pbzLbpFPIpZYbdbRZZCq98ESnHc5rXj/ZR8IJMpfXdaljB5AihQsP1x+td+IzbI+HY0/7WrRTqK6Ti27fK54EqOY5pOawUHaDtdStr+B9feAvFS+MPB+g6rIYY7y/062vZraJs+WZYlfGM5A+bjNFcN4Ahih8SabBYwNb2NrbrbRRA7tkMcPloCe/Cr+NFfGZHnUM9pVsTSjaEakox84qzT12unt3Pq8ThZYRwpzd3ypv16noGueE9L1qb7dNptlLq8UEkFtqE1ujTQB1ZSFcjcoO45we5rh9P8Ia/Y3BAtSI24YpLHz1weSf5UUVlnHDuFzqtSxFec4yp6JxaWj9U/03Lw2MnhYyhBJqW9z0fTbIWVnCjKhmWNVkkVQNzAcn86KKK+kpU40YKnDZHFKTk7s//&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="_1"&gt;不同数据 …&lt;/h2&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zengyan</dc:creator><pubDate>Mon, 06 Feb 2023 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:zeng-yan.github.io,2023-02-06:/base64-and-ndarray.html</guid><category>工具</category><category>工具</category><category>Python</category></item><item><title>Docker 简明笔记</title><link>https://zeng-yan.github.io/note-of-docker.html</link><description>&lt;h2 id="1"&gt;1 简介&lt;/h2&gt;
&lt;p&gt;虚拟机是完整的os, Linux 容器不是模拟完整的os, 而是对进程进行隔离, docker是对Linux容器的封装. &lt;/p&gt;
&lt;p&gt;Docker的三个核心概念: &lt;br&gt;
-   Image 镜像 (只读模板) : 一个文件系统, 提供运行 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zengyan</dc:creator><pubDate>Fri, 09 Dec 2022 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:zeng-yan.github.io,2022-12-09:/note-of-docker.html</guid><category>工具</category><category>工具</category></item><item><title>Git 简明笔记</title><link>https://zeng-yan.github.io/note-of-git.html</link><description>&lt;h2 id="_1"&gt;组成&lt;/h2&gt;
&lt;p&gt;&lt;img alt="image.png" src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/06965cafe85442baa41f8f3f90c175af~tplv-k3u1fbpfcp-watermark.image?"&gt;&lt;/p&gt;
&lt;p&gt;Git是一个版本控制工具, 主要包含以下几个部分: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;远端 (Remote) : 源码位置. &lt;/li&gt;
&lt;li&gt;工作空间 (Workingspace) : 本地存放项目代码的地方. &lt;/li&gt;
&lt;li&gt;暂存区 (Index/Stage) : 一个记录改动信息的 …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zengyan</dc:creator><pubDate>Fri, 09 Dec 2022 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:zeng-yan.github.io,2022-12-09:/note-of-git.html</guid><category>工具</category><category>工具</category></item><item><title>绘制神经网络层的权值分布</title><link>https://zeng-yan.github.io/draw-nn-weight-distribution.html</link><description>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;plot_module_weights&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;excludes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bias&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;math&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;as&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;plt&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_flatten_weight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpu&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numpy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;tp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;get_flatten_weight&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;weight&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;named_parameters&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;  
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;excludes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;tp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;named_p&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;named_p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tp&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;named_p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;

    &lt;span class="n"&gt;n_col …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zengyan</dc:creator><pubDate>Wed, 05 Oct 2022 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:zeng-yan.github.io,2022-10-05:/draw-nn-weight-distribution.html</guid><category>算法</category><category>算法</category><category>神经网络</category><category>Python</category></item><item><title>RNN和LSTM的理解</title><link>https://zeng-yan.github.io/rnn-and-lstm.html</link><description>&lt;h3 id="rnn"&gt;RNN&lt;/h3&gt;
&lt;p&gt;现在我们的数据样本是这样的序列的形式：&lt;/p&gt;
&lt;div class="math"&gt;$$
[x_1,x_2,...,x_t,..., x_n]
$$&lt;/div&gt;
&lt;p&gt;序列中的每个元素都不是独立的，而是和其他元素存在着一定联 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zengyan</dc:creator><pubDate>Mon, 13 Sep 2021 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:zeng-yan.github.io,2021-09-13:/rnn-and-lstm.html</guid><category>算法</category><category>算法</category><category>神经网络</category><category>Python</category></item><item><title>支持向量机的理解和推导</title><link>https://zeng-yan.github.io/svm.html</link><description>&lt;p&gt;支持向量机(Support Vector Machines, SVM)&lt;/p&gt;
&lt;h2 id="_1"&gt;一些概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;超平面（hyperplane）：决策面，分类的决策边界，如图中黑色直线&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持向量（support vector）：距离超平面距离最近的 …&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zengyan</dc:creator><pubDate>Fri, 10 Sep 2021 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:zeng-yan.github.io,2021-09-10:/svm.html</guid><category>算法</category><category>算法</category></item><item><title>[Godot] Tips</title><link>https://zeng-yan.github.io/godot-tips.html</link><description>&lt;h2 id="_1"&gt;执行顺序&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;_init()&lt;/code&gt; - &lt;code&gt;_enter_tree()&lt;/code&gt; - &lt;code&gt;_ready()&lt;/code&gt; - &lt;code&gt;_process()&lt;/code&gt; - &lt;code&gt;_exit_tree()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_ready()&lt;/code&gt; 和 &lt;code&gt;_exit_tree()&lt;/code&gt; 是先执行完子节点, 后执行父节点, 其他是先父后子.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://docs.godotengine.org/zh-cn/4.x/tutorials/best_practices/godot_notifications.html#ready-vs-enter-tree-vs-notification-parented"&gt;Godot 通知&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="3d"&gt;在3D空间画线&lt;/h2&gt;
&lt;p&gt;这功能居然没有内置节点实 …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zengyan</dc:creator><pubDate>Wed, 01 Oct 1997 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:zeng-yan.github.io,1997-10-01:/godot-tips.html</guid><category>Godot</category><category>Godot</category></item><item><title>日常中突发奇想和尚未整理的代码与材料</title><link>https://zeng-yan.github.io/messy-stuff.html</link><description>&lt;blockquote&gt;
&lt;p&gt;不要为了学习而学习，而是为了解决需求而学习&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="_1"&gt;自用软件&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/sandboxie-plus/Sandboxie"&gt;Sandboxie&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/M2Team/NanaZip"&gt;NanaZip&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/clash-verge-rev/clash-verge-rev"&gt;Clash Verge&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Planshit/Tai"&gt;Tai&lt;/a&gt;&lt;/p&gt;
&lt;h1 id="_2"&gt;常用代码&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# 统计代码行数&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nn"&gt;pathlib&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;

&lt;span class="n"&gt;folder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;D:/Projects/Godot/isolatown&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;gd_files …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Zengyan</dc:creator><pubDate>Wed, 01 Oct 1997 00:00:00 +0800</pubDate><guid isPermaLink="false">tag:zeng-yan.github.io,1997-10-01:/messy-stuff.html</guid><category>Python</category><category>Python</category></item></channel></rss>